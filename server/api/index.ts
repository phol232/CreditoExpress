import express from "express";
import cors from "cors";

const app = express();

// CORS - permitir todos los or√≠genes por ahora
app.use(cors());
app.use(express.json());

// In-memory storage para c√≥digos de verificaci√≥n
const verificationCodes = new Map<string, { code: string; expiresAt: number }>();

// Ruta de prueba
app.get("/", (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
      <head><title>CreditoExpress API</title></head>
      <body>
        <h1>‚úÖ CreditoExpress Backend API</h1>
        <p>El servidor est√° funcionando correctamente.</p>
        <p>Endpoints disponibles:</p>
        <ul>
          <li>POST /api/auth/send-verification-code</li>
          <li>POST /api/auth/verify-code</li>
        </ul>
      </body>
    </html>
  `);
});

// Generar c√≥digo de 6 d√≠gitos
function generateCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// Enviar c√≥digo de verificaci√≥n
app.post("/api/auth/send-verification-code", async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ 
        success: false, 
        message: "Email es requerido" 
      });
    }

    const code = generateCode();
    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 minutos

    // Guardar c√≥digo
    verificationCodes.set(email, { code, expiresAt });

    console.log(`üìß C√≥digo generado para ${email}: ${code}`);

    // TODO: Aqu√≠ ir√≠a el env√≠o de email con Brevo
    // Por ahora solo retornamos √©xito
    
    res.json({ 
      success: true, 
      message: "C√≥digo de verificaci√≥n enviado",
      // Solo para testing, remover en producci√≥n:
      debug: { code }
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ 
      success: false, 
      message: "Error al enviar el c√≥digo" 
    });
  }
});

// Verificar c√≥digo
app.post("/api/auth/verify-code", (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({ 
        success: false, 
        message: "Email y c√≥digo son requeridos" 
      });
    }

    const stored = verificationCodes.get(email);

    if (!stored) {
      return res.status(400).json({ 
        success: false, 
        message: "C√≥digo no encontrado o expirado" 
      });
    }

    if (Date.now() > stored.expiresAt) {
      verificationCodes.delete(email);
      return res.status(400).json({ 
        success: false, 
        message: "El c√≥digo ha expirado" 
      });
    }

    if (stored.code !== code) {
      return res.status(400).json({ 
        success: false, 
        message: "C√≥digo incorrecto" 
      });
    }

    // C√≥digo correcto
    verificationCodes.delete(email);
    res.json({ 
      success: true, 
      message: "C√≥digo verificado correctamente" 
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ 
      success: false, 
      message: "Error al verificar el c√≥digo" 
    });
  }
});

export default app;
